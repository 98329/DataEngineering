{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "d0f10bf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask, render_template, request\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.chrome.options import Options\n",
    "from bs4 import BeautifulSoup\n",
    "import re\n",
    "from collections import Counter\n",
    "import pymysql\n",
    "import nltk\n",
    "\n",
    "nltk.download('stopwords')\n",
    "from nltk.corpus import stopwords\n",
    "\n",
    "app = Flask(\"my_browser_app\")\n",
    "\n",
    "def browser(engine, term):\n",
    "    # Remove stopwords\n",
    "    sw = stopwords.words('english')\n",
    "    words_ns = [word for word in term.split() if word.lower() not in sw]\n",
    "\n",
    "    # Construct search URL\n",
    "    search_url = engine + \"+\".join(words_ns)\n",
    "\n",
    "    # Set up Selenium options\n",
    "    options = Options()\n",
    "    options.add_argument(\"--headless\")  # Run Chrome in headless mode (no GUI)\n",
    "\n",
    "    # Provide path to chromedriver executable directly in webdriver.Chrome()\n",
    "    driver = webdriver.Chrome(options=options)\n",
    "\n",
    "    # Get search results\n",
    "    driver.get(search_url)\n",
    "    html = driver.page_source\n",
    "\n",
    "    # Parse HTML with BeautifulSoup\n",
    "    soup = BeautifulSoup(html, \"html.parser\")\n",
    "    links = soup.find_all(\"a\")\n",
    "    search_results = []\n",
    "\n",
    "    # Regular expression pattern to extract URLs\n",
    "    url_pattern = 'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'\n",
    "\n",
    "    for link in links:\n",
    "        href = link.get(\"href\")\n",
    "        if href:\n",
    "            # Extract URLs using regular expression\n",
    "            match = re.search(url_pattern, href)\n",
    "            if match:\n",
    "                url = match.group(0)\n",
    "                search_results.append(url)\n",
    "\n",
    "    # Close Selenium WebDriver\n",
    "    driver.quit()\n",
    "\n",
    "    return search_results\n",
    "\n",
    "@app.route('/')\n",
    "def index():\n",
    "    return render_template('index.html')\n",
    "\n",
    "@app.route('/search', methods=['POST'])\n",
    "def search():\n",
    "    term = request.form['term']\n",
    "    engines = (\n",
    "        \"https://www.google.com/search?q=\",\n",
    "        \"https://www.bing.com/?q=\",\n",
    "        \"https://search.yahoo.com/search?p=\",\n",
    "        \"https://duckduckgo.com/?q=\",\n",
    "        \"https://news.search.yahoo.com/search?p=\"\n",
    "    )\n",
    "\n",
    "    exclude_words = [\"google\", \"yahoo\", \"microsoft\",\"duckduckgo\", \"bing\"]  # Words to exclude from search results\n",
    "\n",
    "    all_results = []  # List to collect all search results\n",
    "    for engine in engines:\n",
    "        results = browser(engine, term)\n",
    "        all_results.extend(results)  # Append results to the list\n",
    "\n",
    "    # Filter out results containing certain words\n",
    "    filtered_results = [result for result in all_results if not any(word in result.lower() for word in exclude_words)]\n",
    "\n",
    "    # Count occurrences of each URL\n",
    "    url_counts = Counter(filtered_results)\n",
    "\n",
    "    # Get URLs ordered by their count, from most repeated to least repeated\n",
    "    ordered_urls = url_counts.most_common()\n",
    "\n",
    "    try:\n",
    "        myConnection = pymysql.connect(\n",
    "            host='localhost',\n",
    "            user='root',\n",
    "            db='my_custom_bot',\n",
    "        )\n",
    "        cursor = myConnection.cursor()\n",
    "\n",
    "        sql = f'INSERT INTO New_Engine (Search, URL, Count) VALUES (%s, %s, %s)'\n",
    "        values = [(term, url, count) for url, count in url_counts.items()]\n",
    "\n",
    "        cursor.executemany(sql, values)\n",
    "        myConnection.commit()\n",
    "\n",
    "    except pymysql.Error as e:\n",
    "        print(f\"Error: {e}\")\n",
    "\n",
    "    finally:\n",
    "        myConnection.close()\n",
    "\n",
    "    return render_template('search_results.html', results=ordered_urls)\n",
    "\n",
    "if \"my_browser_app\" == '__main__':\n",
    "    app.run(debug=True)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
